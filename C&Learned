const限定符
const修饰指针的几种情形
1.常量指针
	const 类型 * 指针名    等价于   类型 const * 指针名
	const int *p1=&a  	//不可以用*p改变a的值
	
	int a=10; int b=3;
	*p1=11 //错误，因为p1指向的内容是a的值10，此处*p1=11相当于修改a的值错误，但是a=11确实可以的
	p=&b; //正确	指针指向的内容不可变，但是指针p1可以指向其他位置
	
	
2.指针常量
	类型 * const 指针名
	int * const p1 = &a
	
	p1=&a //正确 指针指向a地址
	*p1=5 //正确 指针指向的内容可以被改变，即可以通过*p1去修改a的值
	p1=&b  //错误 ，指针的位置再也不能变。
	
3.指向类型常量的常量指针
	const 类型 * const 指针名 
	const int * const p1 = &a	//p指向的内存单元，和p指向内存单元中存放的内容都是不可变的

Const修饰函数后面：不可以修改任何数据成员，即函数体内的任何数据成员不可修改
int temp::getAge() const
{
    age+=10; // #Error...error C2166: l-value specifies const object #
    return age;
}  

指针传值 && 引用传值
指针传值
Swap(&a,&b);
void Swap(int *p1,int *p2)  
{  
    int tmp;  
    tmp = *p1;  
    *p1 = *p2;  
    *p2 = tmp;  
    printf("a=%d,b=%d\n",*p1,*p2);  
}
p1 p2指向的其实是a、b的地址如果函数中仅仅只做p1、p2的交换只是交换了形参的地址，并未对a、b的值进行交换。
*p1、*p2则是代表了实参a、b的值交换*p1、*p2即是交换两个实参的值

引用传值
swap2(a,b);
void swap2(int& a,int& b){
    int temp = a;
    a = b;
    b = temp;
}

C++ 深浅拷贝：
【浅拷贝】是增加了一个指针，指向原来已经存在的内存
【深拷贝】是增加了一个指针，并新开辟了一块空间，让指针指向这块新开辟的空间。
class CA
{
　public:
　　CA(int b,char* cstr)
　　{
　　　a=b;
　　　str=new char[b];
　　　strcpy(str,cstr);
　　}
　　CA(const CA& C)
　　{
　　　a=C.a;
　　　str=new char[a]; //深拷贝
　　　if(str!=0)
　　　　strcpy(str,C.str);
　　}
　　void Show()
　　{
　　　cout<<str<<endl;
　　}
　　~CA()
　　{
　　　delete str;
　　}
　private:
　　int a;
　　char *str;
};

C++ new对象加括号与不加括号
加括号与不加的区别
　　（1）加括号
　　　　1. 若括号为空，即无实参项，那么理解为调用默认构造函数；
　　　　2. 若括号非空，即有实参项，可以理解为调用重载构造函数，或复合默认构造函数。
　　（2）不加括号
　　　　调用默认构造函数，或复合默认构造函数。
    
(1)默认构造函数：编译器会为每一个类默认提供一个构造函数，称之为默认构造函数。默认构造函数一般参数为空。
(2)复合默认构造函数：一个由用户自定义的所有形式参数都赋有默认值的构造函数，称之为复合默认构造函数。
(3)虚析构函数解决的问题----内存泄漏
